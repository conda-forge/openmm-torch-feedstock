{% set name = "openmm-torch" %}
{% set version = "1.5.1" %}

# see github.com/conda-forge/conda-forge.github.io/issues/1059 for naming discussion
{% set torch_proc_type = "cuda" if cuda_compiler_version != "None" else "cpu" %}

{% if cuda_compiler_version in (None, "None", True, False) %}
{% set cuda_major = 0 %}
{% else %}
{% set cuda_major = environ.get("cuda_compiler_version", "11.8").split(".")[0] | int %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  git_url: https://github.com/openmm/{{ name }}.git
  git_rev: "v1.5.1"
build:
  number: 1
  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
  skip: true  # [aarch64 and cuda_compiler_version not in (undefined, 'None')]
  # pytorch in conda-forge does not support CUDA 11.8 anymore
  skip: true  # [cuda_compiler_version == "11.8"]

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - numpy >=1.19                           # [build_platform != target_platform]
    - swig                                   # [build_platform != target_platform]
    - pytorch                                # [build_platform != target_platform]
    - pytorch =*={{ torch_proc_type }}*      # [build_platform != target_platform]
    - openmm >=8.2.0                         # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ stdlib("c") }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    {% if cuda_major >= 12 %}
    - libcufft-dev
    - cuda-driver-dev   # [linux]
    - cuda-cudart-dev
    - cuda-nvrtc-dev
    - cuda-nvtx-dev
    - cuda-nvml-dev
    - libcublas-dev
    - libcurand-dev
    {% endif %}
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')]
    - cmake
    - make
  host:
    - python
    - setuptools
    - pip
    - swig
    - openmm >=8.2.0
    - ocl-icd  # [linux]
    - khronos-opencl-icd-loader  # [osx]
    - pytorch
    - pytorch =*={{ torch_proc_type }}*
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, 'None')]
    - nvtx-c                                    # [cuda_compiler_version not in (undefined, 'None') and win]
  run:
    - python
    - {{ pin_compatible('openmm', max_pin='x.x') }}
    - ocl-icd  # [linux]
    - ocl-icd-system  # [linux]
    - khronos-opencl-icd-loader  # [osx]
    - ocl_icd_wrapper_apple      # [osx]
  run_constrained:
    # 2022/02/05 hmaarrfk
    # While conda packaging seems to allow us to specify
    # constraints on the same package in different lines
    # the resulting package doesn't have the ability to
    # be specified in multiples lines
    # This makes it tricky to use run_exports
    # we add the GPU constraint in the run_constrained
    # to allow us to have "two" constraints on the
    # running package
    - pytorch =*={{ torch_proc_type }}*

test:
  imports:
    - openmmtorch

about:
  home: https://github.com/openmm/openmm-torch
  license: MIT
  license_family: MIT
  license_file: README.md
  summary: OpenMM plugin to define forces with neural networks
  description: |
    This is a plugin for OpenMM that allows neural networks to be
    used for defining forces. It is implemented with PyTorch.
    To use it, you create a PyTorch model that takes particle
    positions as input and produces energy as output. This plugin
    uses the model to apply forces to particles during a simulation.
  doc_url: https://github.com/openmm/openmm-torch
  dev_url: https://github.com/openmm/openmm-torch

extra:
  recipe-maintainers:
    - raimis
    - jaimergp
    - peastman
    - mikemhenry
    - RaulPPelaez
